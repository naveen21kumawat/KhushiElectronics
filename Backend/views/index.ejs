<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Khushi Laptops - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body class="bg-gray-100">
    <div class="min-h-screen flex">
        <!-- Sidebar -->
        <%- include('partials/sidebar') %>
        <!-- Main Content -->
        <div class="flex-1 p-8">
            <!-- Header -->
            <%- include('partials/header') %>
            <!-- Dashboard Section -->
            <%- include('partials/dashboard') %>
            <!-- Products Section -->
            <%- include('partials/products') %>
            <!-- Add Product Section -->
            <%- include('partials/add-product') %>
            <!-- Edit Product Section -->
            <%- include('partials/edit-product') %>
            <!-- Sales Section -->
            <%- include('partials/sales') %>
            <!-- Orders Section -->
            <%- include('partials/orders') %>
        </div>
    </div>

    <script>
        // Navigation functionality
        function showSection(sectionId) {
            // Hide all sections
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('hidden');
            });

            // Remove active class from all nav links
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active', 'bg-gray-700');
            });

            // Show selected section
            document.getElementById(sectionId).classList.remove('hidden');

            // Add active class to clicked nav link
            event.target.classList.add('active', 'bg-gray-700');

            // Load data for the section
            loadSectionData(sectionId);
        }

        // Load data for different sections
        function loadSectionData(sectionId) {
            switch (sectionId) {
                case 'dashboard':
                    loadDashboardData();
                    break;
                case 'products':
                    loadProducts();
                    break;
                case 'sales':
                    loadSalesData();
                    break;
                case 'orders':
                    loadOrders();
                    break;
            }
        }

        // Dashboard data loading
        function loadDashboardData() {
            // Load statistics
            fetch('/api/stats')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('totalProducts').textContent = data.totalProducts || 0;
                    document.getElementById('totalSales').textContent = '$' + (data.totalSales || 0);
                    document.getElementById('totalOrders').textContent = data.totalOrders || 0;
                    document.getElementById('totalCustomers').textContent = data.totalCustomers || 0;
                })
                .catch(error => console.error('Error loading stats:', error));

            // Initialize charts
            initializeCharts();
        }

        // Initialize charts
        function initializeCharts() {
            // Sales Chart
            const salesCtx = document.getElementById('salesChart').getContext('2d');
            new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Sales',
                        data: [12, 19, 3, 5, 2, 3],
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Products Chart
            const productsCtx = document.getElementById('productsChart').getContext('2d');
            new Chart(productsCtx, {
                type: 'doughnut',
                data: {
                    labels: ['HP', 'Dell', 'Lenovo', 'Apple'],
                    datasets: [{
                        data: [12, 19, 3, 5],
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.8)',
                            'rgba(54, 162, 235, 0.8)',
                            'rgba(255, 205, 86, 0.8)',
                            'rgba(75, 192, 192, 0.8)'
                        ]
                    }]
                },
                options: {
                    responsive: true
                }
            });
        }

        // Load products
        function loadProducts() {
            fetch('/api/products')
                .then(response => response.json())
                .then(products => {
                    const tbody = document.getElementById('productsTableBody');
                    tbody.innerHTML = '';

                    products.forEach(product => {
                        const row = `
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <img class="h-10 w-10 rounded-full object-cover" src="${product.image || '/placeholder.png'}" alt="${product.name}">
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">${product.name}</div>
                                            <div class="text-sm text-gray-500">${product.model}</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${product.brand}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${product.price}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                        In Stock
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                        Active
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button onclick="editProduct('${product._id}')" class="text-indigo-600 hover:text-indigo-900 mr-3">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button onclick="deleteProduct('${product._id}')" class="text-red-600 hover:text-red-900">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });
                })
                .catch(error => console.error('Error loading products:', error));
        }

        // Add product form submission
        document.getElementById('addProductForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(this);

            fetch('/api/products/add', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Product added successfully!');
                        this.reset();
                        showSection('products');
                    } else {
                        alert('Error adding product: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error adding product');
                });
        });

        // Filter products
        function filterProducts() {
            const searchTerm = document.getElementById('productSearch').value;
            const brandFilter = document.getElementById('brandFilter').value;

            // Implement filtering logic here
            console.log('Filtering products:', { searchTerm, brandFilter });
        }

        // Edit product
        function editProduct(productId) {
            // Implement edit functionality

            document.getElementById('editProductForm').classList.remove('hidden');
            // Load product details into the edit form
            fetch(`/api/products/${productId}`)
                .then(response => response.json())
                .then(product => {
                    console.log('Editing product:', product);
                    document.querySelector('#editProductDetails input[name="name"]').value = product.laptop.name;
                    document.querySelector('#editProductDetails select[name="brand"]').value = product.laptop.brand;
                    document.querySelector('#editProductDetails input[name="model"]').value = product.laptop.model;
                    document.querySelector('#editProductDetails input[name="price"]').value = product.laptop.price;
                    document.querySelector('#editProductDetails input[name="originalPrice"]').value = product.laptop.originalPrice;
                    document.querySelector('#editProductDetails select[name="processor"]').value = product.laptop.processor;
                    document.querySelector('#editProductDetails input[name="ram"]').value = product.laptop.ram;
                    document.querySelector('#editProductDetails input[name="storage"]').value = product.laptop.storage;
                    document.querySelector('#editProductDetails select[name="os"]').value = product.laptop.os;
                    document.querySelector('#editProductDetails textarea[name="description"]').value = product.laptop.description;
                })
                .catch(error => {
                    console.error('Error loading product details:', error);
                    alert('Error loading product details');
                });

            // Handle form submission for editing product
            document.getElementById('editProductDetails').addEventListener('submit', function (e) {
                e.preventDefault();
                const formData = new FormData(this);
                formData.append('id', productId); // Add product ID to form data
                fetch(`api/products/${productId}`, {
                    method: 'PUT',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Product updated successfully!');
                            showSection('products');
                        } else {
                            alert('Error updating product: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error updating product');
                    });
            });
        }

        function CancelEditProduct() {
            document.getElementById('editProductForm').classList.add('hidden');
        }

        // Delete product
        function deleteProduct(productId) {
            if (confirm('Are you sure you want to delete this product?')) {
                fetch(`/api/products/${productId}`, {
                    method: 'DELETE'
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Product deleted successfully!');
                            loadProducts();
                        } else {
                            alert('Error deleting product: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error deleting product');
                    });
            }
        }

        // Load sales data
        function loadSalesData() {
            fetch('/api/sales')
                .then(response => response.json())
                .then(sales => {
                    // Update sales summary
                    const totalSales = sales.reduce((sum, sale) => sum + sale.amount, 0);
                    document.getElementById('monthlySales').textContent = '$' + totalSales;
                    document.getElementById('weeklySales').textContent = '$' + (totalSales * 0.25).toFixed(0);
                    document.getElementById('dailySales').textContent = '$' + (totalSales * 0.04).toFixed(0);

                    // Populate sales table
                    const tbody = document.getElementById('salesTableBody');
                    tbody.innerHTML = '';

                    sales.forEach(sale => {
                        const row = `
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">#${sale.id}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${sale.customer}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${sale.product}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${sale.amount}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${new Date(sale.date).toLocaleDateString()}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                        ${sale.status}
                                    </span>
                                </td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });

                    // Initialize sales analytics chart
                    const salesAnalyticsCtx = document.getElementById('salesAnalyticsChart').getContext('2d');
                    new Chart(salesAnalyticsCtx, {
                        type: 'bar',
                        data: {
                            labels: ['HP', 'Dell', 'Lenovo', 'Apple'],
                            datasets: [{
                                label: 'Sales by Brand',
                                data: [12, 19, 3, 5],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.8)',
                                    'rgba(54, 162, 235, 0.8)',
                                    'rgba(255, 205, 86, 0.8)',
                                    'rgba(75, 192, 192, 0.8)'
                                ]
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                })
                .catch(error => console.error('Error loading sales:', error));
        }

        // Load orders
        function loadOrders() {
            fetch('/api/orders')
                .then(response => response.json())
                .then(orders => {
                    // Update order status summary
                    const statusCounts = {
                        pending: 0,
                        processing: 0,
                        shipped: 0,
                        delivered: 0
                    };

                    orders.forEach(order => {
                        const status = order.status.toLowerCase();
                        if (statusCounts.hasOwnProperty(status)) {
                            statusCounts[status]++;
                        }
                    });

                    document.getElementById('pendingOrders').textContent = statusCounts.pending;
                    document.getElementById('processingOrders').textContent = statusCounts.processing;
                    document.getElementById('shippedOrders').textContent = statusCounts.shipped;
                    document.getElementById('deliveredOrders').textContent = statusCounts.delivered;

                    // Populate orders table
                    const tbody = document.getElementById('ordersTableBody');
                    tbody.innerHTML = '';

                    orders.forEach(order => {
                        const statusColor = {
                            'Pending': 'bg-yellow-100 text-yellow-800',
                            'Processing': 'bg-blue-100 text-blue-800',
                            'Shipped': 'bg-green-100 text-green-800',
                            'Delivered': 'bg-gray-100 text-gray-800'
                        };

                        const row = `
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">#${order.id}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${order.customer}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${order.products.join(', ')}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${order.total}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${new Date(order.date).toLocaleDateString()}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusColor[order.status] || 'bg-gray-100 text-gray-800'}">
                                        ${order.status}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button onclick="updateOrderStatus('${order.id}')" class="text-indigo-600 hover:text-indigo-900 mr-3">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button onclick="viewOrderDetails('${order.id}')" class="text-blue-600 hover:text-blue-900">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });
                })
                .catch(error => console.error('Error loading orders:', error));
        }

        // Update order status
        function updateOrderStatus(orderId) {
            const newStatus = prompt('Enter new status (Pending/Processing/Shipped/Delivered):');
            if (newStatus) {
                // Implement order status update logic here
                console.log('Updating order status:', orderId, newStatus);
                alert('Order status updated successfully!');
                loadOrders(); // Reload orders
            }
        }

        // View order details
        function viewOrderDetails(orderId) {
            // Implement order details view logic here
            console.log('Viewing order details:', orderId);
            alert('Order details functionality will be implemented here');
        }

        // Initialize dashboard on page load
        document.addEventListener('DOMContentLoaded', function () {
            loadDashboardData();
        });
    </script>
</body>

</html>